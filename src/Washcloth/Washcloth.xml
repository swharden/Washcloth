<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Washcloth</name>
    </assembly>
    <members>
        <member name="T:Washcloth.CompareResult">
            <summary>The result of a comparison between two values.</summary>
        </member>
        <member name="F:Washcloth.CompareResult.Less">
            <summary>The left operand is less than the right operand.</summary>
        </member>
        <member name="F:Washcloth.CompareResult.Equal">
            <summary>The left operand is equal to the right operand.</summary>
        </member>
        <member name="F:Washcloth.CompareResult.Greater">
            <summary>The left operand is greater than the right operand.</summary>
        </member>
        <member name="T:Washcloth.Constant`1">
            <summary>Contains generic static numerical constant values.</summary>
            <typeparam name="T">The generic numeric type of the constants.</typeparam>
        </member>
        <member name="P:Washcloth.Constant`1.Zero">
            <summary>Zero [0]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.One">
            <summary>One [1]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Two">
            <summary>Two [2]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Three">
            <summary>Three [3]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Four">
            <summary>Four [4]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Ten">
            <summary>Ten [10]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.NegativeOne">
            <summary>Negative One [-1]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Pi">
            <summary>π [3.14...]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.π">
            <summary>π [3.14...]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Pi2">
            <summary>2π [6.28...]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.π2">
            <summary>2π [6.28...]</summary>
        </member>
        <member name="P:Washcloth.Constant`1.PiOver2">
            <summary>π / 2</summary>
        </member>
        <member name="P:Washcloth.Constant`1.πOver2">
            <summary>π / 2</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Pi3Over2">
            <summary>3π/2</summary>
        </member>
        <member name="P:Washcloth.Constant`1.π3Over2">
            <summary>3π/2</summary>
        </member>
        <member name="P:Washcloth.Constant`1.FourOverPiSquared">
            <summary>4/(π^2)</summary>
        </member>
        <member name="P:Washcloth.Constant`1.FourOverπSquared">
            <summary>4/(π^2)</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Negative4OverPiSquared">
            <summary>-4/(π^2)</summary>
        </member>
        <member name="P:Washcloth.Constant`1.Negative4OverπSquared">
            <summary>-4/(π^2)</summary>
        </member>
        <member name="M:Washcloth.Constant`1.ComputePi(System.Predicate{`0})">
            <summary>Computes the value of pi for the provided generic type.</summary>
            <param name="predicate">The cancellation token for cutting off computation.</param>
            <returns>The computed value of pi.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.IDataStructure`1">
            <summary>Polymorphism base for all data structures in the Towel framework.</summary>
            <typeparam name="T">The type of the instances to store in this data structure.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.IDataStructure`1.Stepper(System.Action{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Washcloth.DataStructures.IDataStructure`1.Stepper(System.Func{`0,Washcloth.StepStatus})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure">
            <summary>Contains extension methods for the Structure interface.</summary>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML">
            <summary>
            Invokes a method for each entry in the data structure.
            <para>Runtime: O(n * step)</para>
            </summary>
            <typeparam name="Step">The method to invoke on each item in the structure.</typeparam>
            <param name="step">The method to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IAuditable`1">
            <summary>Property of a data structure (does it have a contains method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.IAuditable`1.Contains(`0)">
            <summary>Checks if the data structure contains a value.</summary>
            <param name="value">The value to look for in the data structure.</param>
            <returns>True if the value exists in the data structure. False if not.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IHashing`1">
            <summary>Property of a data structure (does it have a Hash property).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="P:Washcloth.DataStructures.DataStructure.IHashing`1.Hash">
            <summary>Gets the hashing function being used by the data structure.</summary>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IComparing`1">
            <summary>Property of a data structure (does it have a Compare property).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="P:Washcloth.DataStructures.DataStructure.IComparing`1.Compare">
            <summary>Gets the comparing function of the data structure.</summary>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IAddable`1">
            <summary>Property of a data structure (does it have a Add method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.IAddable`1.TryAdd(`0,System.Exception@)">
            <summary>Tries to add a value to a data structure.</summary>
            <param name="value">The value to add to the data structure.</param>
            <param name="exception">The exception that occurred if the add failed.</param>
            <returns>True if the value was added or false if not.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IRemovable`1">
            <summary>Property of a data structure (does it have a Romove method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.IRemovable`1.TryRemove(`0,System.Exception@)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <returns>True if the value was removed or false if not.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.ICountable">
            <summary>Property of a data structure (does it have a Count method).</summary>
        </member>
        <member name="P:Washcloth.DataStructures.DataStructure.ICountable.Count">
            <summary>Gets the current count of the data structure.</summary>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IClearable">
            <summary>Property of a data structure (does it have a Clear method).</summary>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.IClearable.Clear">
            <summary>Returns the data structure to an empty state.</summary>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IEquating`1">
            <summary>Property of a data structure (does it have a Equate property).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="P:Washcloth.DataStructures.DataStructure.IEquating`1.Equate">
            <summary>Gets the equating function of the data structure.</summary>
        </member>
        <member name="T:Washcloth.DataStructures.DataStructure.IStepperRef`1">
            <summary>Property of a data structure (does it have a Stepper ref method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.IStepperRef`1.Stepper(Washcloth.StepRef{`0})">
            <summary>Steps through all the values.</summary>
            <param name="step">The action to perform on each value.</param>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.IStepperRef`1.Stepper(Washcloth.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (left to right).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.Stepper``1(Washcloth.DataStructures.IDataStructure{``0})">
            <summary>Gets the stepper for this data structure.</summary>
            <returns>The stepper for this data structure.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.StepperBreak``1(Washcloth.DataStructures.IDataStructure{``0})">
            <summary>Gets the stepper for this data structure.</summary>
            <returns>The stepper for this data structure.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.TryAdd``1(Washcloth.DataStructures.DataStructure.IAddable{``0},``0)">
            <summary>Adds a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="structure">The structure to add the value to.</param>
            <param name="value">The value to be added.</param>
            <returns>True if the add was successful or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.Add``1(Washcloth.DataStructures.DataStructure.IAddable{``0},``0)">
            <summary>Adds a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="structure">The structure to add the value to.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.TryRemove``1(Washcloth.DataStructures.DataStructure.IRemovable{``0},``0)">
            <summary>Tries to removes a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="structure">The structure to remove the value from.</param>
            <param name="value">The value to be removed.</param>
            <returns>True if the remove was successful or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.DataStructure.Remove``1(Washcloth.DataStructures.DataStructure.IRemovable{``0},``0)">
            <summary>Removes a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="structure">The structure to remove the value from.</param>
            <param name="value">The value to be removed.</param>
        </member>
        <member name="T:Washcloth.DataStructures.IMap`2">
            <summary>A map between instances of two types. The polymorphism base for Map implementations in Towel.</summary>
            <typeparam name="T">The generic type to be stored in this data structure.</typeparam>
            <typeparam name="K">The type of keys used to look up items in this structure.</typeparam>
        </member>
        <member name="P:Washcloth.DataStructures.IMap`2.Item(`1)">
            <summary>Allows indexed look-up of the structure. (Set does not replace the Add() method)</summary>
            <param name="key">The "index" to access of the structure.</param>
            <returns>The value at the index of the requested key.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.TryGet(`1,`0@,System.Exception@)">
            <summary>Tries to get a value by key.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value if found or default.</param>
            <param name="exception">The exception that occured if not found.</param>
            <returns>True if the key was found or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Set(`1,`0)">
            <summary>Sets value in the map.</summary>
            <param name="key">The key of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.TryAdd(`1,`0,System.Exception@)">
            <summary>Tries to add a value to the map.</summary>
            <param name="key">The key of the value.</param>
            <param name="value">The value to be added.</param>
            <param name="exception">The exception that occured if the add failed.</param>
            <returns>True if the value was added or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Stepper(Washcloth.StepRef{`0})">
            <summary>Steps through all the values in the map.</summary>
            <param name="step">The action to perform on all the values.</param>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Stepper(Washcloth.StepRefBreak{`0})">
            <summary>Steps through all the values in the map.</summary>
            <param name="step">The action to perform on all the values.</param>
            <returns>The status of the stepper.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Keys(System.Action{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="step">The action to perform on all the keys.</param>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Keys(System.Func{`1,Washcloth.StepStatus})">
            <summary>Steps through all the keys.</summary>
            <param name="step">The action to perform on all the keys.</param>
            <returns>The status of the stepper.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Stepper(System.Action{`0,`1})">
            <summary>Steps through all the keys and values.</summary>
            <param name="step">The action to perform on all the keys and values.</param>
        </member>
        <member name="M:Washcloth.DataStructures.IMap`2.Stepper(System.Func{`0,`1,Washcloth.StepStatus})">
            <summary>Steps through all the keys and values.</summary>
            <param name="step">The action to perform on all the keys and values.</param>
            <returns>The status of the stepper.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.Map">
            <summary>Static Extension class for Map interface implementers.</summary>
        </member>
        <member name="M:Washcloth.DataStructures.Map.TryAdd``2(Washcloth.DataStructures.IMap{``0,``1},``1,``0)">
            <summary>Tries to get a value in a map by key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="K">The type of keys in the map.</typeparam>
            <param name="map">The map to get the value from.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value of the provided key in the map or default.</param>
            <returns>True if the key was found or false if not found.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.Map.Add``2(Washcloth.DataStructures.IMap{``0,``1},``1,``0)">
            <summary>Gets a value in a map by key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="K">The type of keys in the map.</typeparam>
            <param name="map">The map to get the value from.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value to add to the map.</param>
            <returns>The value of the provided key in the map.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.Map.TryGet``2(Washcloth.DataStructures.IMap{``0,``1},``1,``0)">
            <summary>Tries to get a value in a map by key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="K">The type of keys in the map.</typeparam>
            <param name="map">The map to get the value from.</param>
            <param name="key">The key of the value to get.</param>
            <param name="default">The default value to return if the value is not found.</param>
            <returns>The value if found or the defautl value.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.Map.TryGet``2(Washcloth.DataStructures.IMap{``0,``1},``1,``0@)">
            <summary>Tries to get a value in a map by key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="K">The type of keys in the map.</typeparam>
            <param name="map">The map to get the value from.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value of the provided key in the map or default.</param>
            <returns>True if the key was found or false if not found.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.Map.Get``2(Washcloth.DataStructures.IMap{``0,``1},``1)">
            <summary>Gets a value in a map by key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="K">The type of keys in the map.</typeparam>
            <param name="map">The map to get the value from.</param>
            <param name="key">The key of the value to get.</param>
            <returns>The value of the provided key in the map.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.Map.Keys``2(Washcloth.DataStructures.IMap{``0,``1})">
            <summary>Gets the stepper for this data structure.</summary>
            <returns>The stepper for this data structure.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.Map.KeysBreak``2(Washcloth.DataStructures.IMap{``0,``1})">
            <summary>Gets the stepper for this data structure.</summary>
            <returns>The stepper for this data structure.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.MapHashLinked`4">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="K">The generic key type of this map.</typeparam>
            <typeparam name="Equate">The equate function.</typeparam>
            <typeparam name="Hash">The hash function.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.#ctor(`2,`3,System.Nullable{System.Int32})">
            <summary>
            Constructs a hashed map.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="equate">The equate delegate.</param>
            <param name="hash">The hashing function.</param>
            <param name="expectedCount">The expected count of the map.</param>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.#ctor(Washcloth.DataStructures.MapHashLinked{`0,`1,`2,`3})">
            <summary>
            This constructor is for cloning purposes.
            <para>Runtime: O(n)</para>
            </summary>
            <param name="map">The map to clone.</param>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`4.TableSize">
            <summary>
            The current size of the hashed table.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`4.Count">
            <summary>
            The current number of values in the map.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`4.Washcloth#DataStructures#DataStructure#IHashing{K}#Hash">
            <summary>
            The delegate for computing hash codes.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`4.Washcloth#DataStructures#DataStructure#IEquating{K}#Equate">
            <summary>
            The delegate for equality checking.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`4.Item(`1)">
            <summary>Gets the value of a specified key.</summary>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.TryAdd(`1,`0,System.Exception@)">
            <summary>
            Tries to add a value to the map.
            <para>Runtime: O(n), Ω(1), ε(1)</para>
            </summary>
            <param name="key">The key of the value.</param>
            <param name="value">The value to be added.</param>
            <param name="exception">The exception that occured if the add failed.</param>
            <returns>True if the value was added or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.TryGet(`1,`0@,System.Exception@)">
            <summary>Tries to get a value by key.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value if found or default.</param>
            <param name="exception">The exception that occured if not found.</param>
            <returns>True if the key was found or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Set(`1,`0)">
            <summary>
            Sets value in the map.
            <para>Runtime: O(n), Ω(1), ε(1)</para>
            </summary>
            <param name="key">The key of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.TryRemove(`1,System.Exception@)">
            <summary>Tries to remove a keyed value.</summary>
            <param name="key">The key of the value to remove.</param>
            <param name="exception">The exception that occurred if the removal failed.</param>
            <returns>True if the removal was successful for false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.TryRemoveWithoutTrim(`1,System.Exception@)">
            <summary>Tries to remove a keyed value without shrinking the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <param name="exception">The exception that occurred if the removal failed.</param>
            <returns>True if the removal was successful for false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Trim">
            <summary>
            Trims the table to an appropriate size based on the current count.
            <para>Runtime: O(n), Ω(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Clone">
            <summary>
            Creates a shallow clone of this map.
            <para>Runtime: Θ(n)</para>
            </summary>
            <returns>A shallow clone of this map.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Contains(`1)">
            <summary>
            Determines if a value has been added to a map.
            <para>Runtime: O(n), Ω(1), ε(1)</para>
            </summary>
            <param name="key">The key of the value to look for in the map.</param>
            <returns>True if the value has been added to the map or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Clear">
            <summary>
            Removes all the values in the map.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Stepper(System.Action{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Stepper(Washcloth.StepRef{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Stepper(System.Func{`0,Washcloth.StepStatus})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Stepper(Washcloth.StepRefBreak{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Keys(System.Action{`1})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Keys(System.Func{`1,Washcloth.StepStatus})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Stepper(System.Action{`0,`1})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.Stepper(System.Func{`0,`1,Washcloth.StepStatus})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.GetEnumerator">
            <summary>Gets the enumerator for the map.</summary>
            <returns>The enumerator for the map.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`4.ToArray">
            <summary>
            Puts all the values in this map into an array.
            <para>Runtime: Θ(n)</para>
            </summary>
            <returns>An array with all the values in the map.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.MapHashLinked`2">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="K">The generic key type of this map.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`2.#ctor(System.Func{`1,`1,System.Boolean},System.Func{`1,System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a hashed map.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="equate">The equate delegate.</param>
            <param name="hash">The hashing function.</param>
            <param name="expectedCount">The expected count of the map.</param>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`2.#ctor(Washcloth.DataStructures.MapHashLinked{`0,`1})">
            <summary>
            This constructor is for cloning purposes.
            <para>Runtime: O(n)</para>
            </summary>
            <param name="map">The map to clone.</param>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`2.Hash">
            <summary>
            The delegate for computing hash codes.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.MapHashLinked`2.Equate">
            <summary>
            The delegate for equality checking.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.MapHashLinked`2.Clone">
            <summary>
            Creates a shallow clone of this map.
            <para>Runtime: Θ(n)</para>
            </summary>
            <returns>A shallow clone of this map.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.IQueue`1">
            <summary>Implements First-In-First-Out queue data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="P:Washcloth.DataStructures.IQueue`1.Newest">
            <summary>The current newest element in the queue.</summary>
        </member>
        <member name="P:Washcloth.DataStructures.IQueue`1.Oldest">
            <summary>The current oldest element in the queue.</summary>
        </member>
        <member name="M:Washcloth.DataStructures.IQueue`1.Enqueue(`0)">
            <summary>Adds an item to the back of the queue.</summary>
            <param name="enqueue">The item to add to the queue.</param>
        </member>
        <member name="M:Washcloth.DataStructures.IQueue`1.Peek">
            <summary>Gets the next item in the queue without removing it.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.IQueue`1.Dequeue">
            <summary>Removes the oldest item in the queue.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.QueueLinked`1">
            <summary>Implements First-In-First-Out queue data structure using a linked list.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.#ctor">
            <summary>
            Creates an instance of a queue.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.QueueLinked`1.Newest">
            <summary>
            The current newest element in the queue.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.QueueLinked`1.Oldest">
            <summary>
            The current oldest element in the queue.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.QueueLinked`1.Count">
            <summary>
            Returns the number of items in the queue.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.ToArray">
            <summary>
            Converts the list into a standard array.
            <para>Runtime: O(n)</para>
            </summary>
            <returns>A standard array of all the items.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Enqueue(`0)">
            <summary>
            Adds an item to the back of the queue.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="enqueue">The item to add to the queue.</param>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Dequeue">
            <summary>
            Removes the oldest item in the queue.
            <para>Runtime: O(1)</para>
            </summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Peek">
            <summary>
            Gets the next item in the queue without removing it.
            <para>Runtime: O(1)</para>
            </summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Clear">
            <summary>
            Resets the queue to an empty state.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Stepper``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Stepper(System.Action{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.StepperRef``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Stepper(Washcloth.StepRef{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.StepperBreak``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Stepper(System.Func{`0,Washcloth.StepStatus})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.Stepper(Washcloth.StepRefBreak{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.StepperRefBreak``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueLinked`1.GetEnumerator">
            <summary>
            Gets the enumerator for this queue.
            <para>Runtime: O(1)</para>
            </summary>
            <returns>The enumerator for the queue.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.QueueArray`1">
            <summary>Implements First-In-First-Out queue data structure using an array.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.#ctor">
            <summary>
            Constructs a new queue.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.#ctor(System.Int32)">
            <summary>
            Constructs a new queue.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="minimumCapacity">The initial and smallest array size allowed by this list.</param>
        </member>
        <member name="P:Washcloth.DataStructures.QueueArray`1.Count">
            <summary>
            Gets the number of items in the list.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.QueueArray`1.CurrentCapacity">
            <summary>
            Gets the current capacity of the list.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.QueueArray`1.MinimumCapacity">
            <summary>
            Allows you to adjust the minimum capacity of this list.
            <para>Runtime (Get): O(1)</para>
            <para>Runtime (Set): O(n), Ω(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.QueueArray`1.Newest">
            <summary>
            The current newest <typeparamref name="T"/> in the queue.
            <para>Runtime: O(1)</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when: _count &lt;= 0</exception>
        </member>
        <member name="P:Washcloth.DataStructures.QueueArray`1.Oldest">
            <summary>
            The current newest <typeparamref name="T"/> in the queue.
            <para>Runtime: O(1)</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when: _count &lt;= 0</exception>
        </member>
        <member name="P:Washcloth.DataStructures.QueueArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> at an index in the queue.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="index">The index of the <typeparamref name="T"/> to get or set.</param>
            <returns>The element at the provided index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when: index &lt;= 0 || index &gt; _count</exception>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.ToArray">
            <summary>
            Converts the list array into a standard array.
            <para>Runtime: O(<see cref="P:Washcloth.DataStructures.QueueArray`1.Count"/>)</para>
            </summary>
            <returns>A standard array of all the elements.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the list.
            <para>Runtime: O(n), ε(1)</para>
            </summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Dequeue">
            <summary>
            Removes the item at a specific index.
            <para>Runtime: O(n), ε(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Peek">
            <summary>Gets the next item in the queue without removing it.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Clear">
            <summary>
            Returns the queue to an empty state.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Stepper``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Stepper(System.Action{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.StepperRef``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Stepper(Washcloth.StepRef{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.StepperBreak``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Stepper(System.Func{`0,Washcloth.StepStatus})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.Stepper(Washcloth.StepRefBreak{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.StepperRefBreak``1(``0)">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.QueueArray`1.GetEnumerator">
            <summary>Gets the enumerator for this queue.</summary>
            <returns>The enumerator for this queue.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.ISet`1">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The type of values to store in the set.</typeparam>
        </member>
        <member name="T:Washcloth.DataStructures.SetHashLinked`3">
            <summary>An unsorted structure of unique items implemented as a hashed table of linked lists.</summary>
            <typeparam name="T">The type of values to store in the set.</typeparam>
            <typeparam name="Equate">The function for equality comparing values.</typeparam>
            <typeparam name="Hash">The function for computing hash codes.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.#ctor(`1,`2,System.Nullable{System.Int32})">
            <summary>
            Constructs a hashed set.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="equate">The equate delegate.</param>
            <param name="hash">The hashing function.</param>
            <param name="expectedCount">The expected count of the set.</param>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.#ctor(Washcloth.DataStructures.SetHashLinked{`0,`1,`2})">
            <summary>
            This constructor is for cloning purposes.
            <para>Runtime: O(n)</para>
            </summary>
            <param name="set">The set to clone.</param>
        </member>
        <member name="P:Washcloth.DataStructures.SetHashLinked`3.TableSize">
            <summary>
            The current size of the hashed table.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.SetHashLinked`3.Count">
            <summary>
            The current number of values in the set.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.SetHashLinked`3.Washcloth#DataStructures#DataStructure#IHashing{T}#Hash">
            <summary>
            The delegate for computing hash codes.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.SetHashLinked`3.Washcloth#DataStructures#DataStructure#IEquating{T}#Equate">
            <summary>
            The delegate for equality checking.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.TryAdd(`0,System.Exception@)">
            <summary>
            Adds a value to the set.
            <para>Runtime: O(n), Ω(1), ε(1)</para>
            </summary>
            <param name="value">The value to add to the set.</param>
            <param name="exception">The exception that occurred if the add failed.</param>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.TryRemove(`0,System.Exception@)">
            <summary>Tries to remove a value from the set.</summary>
            <param name="value">The value to remove.</param>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <returns>True if the remove was successful or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.TryRemoveWithoutTrim(`0,System.Exception@)">
            <summary>Tries to remove a value from the set without shrinking the hash table.</summary>
            <param name="value">The value to remove.</param>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <returns>True if the remove was successful or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Resize(System.Int32)">
            <summary>Resizes the table.</summary>
            <param name="tableSize">The desired size of the table.</param>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Trim">
            <summary>
            Trims the table to an appropriate size based on the current count.
            <para>Runtime: O(n), Ω(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Clone">
            <summary>
            Creates a shallow clone of this set.
            <para>Runtime: Θ(n)</para>
            </summary>
            <returns>A shallow clone of this set.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Contains(`0)">
            <summary>
            Determines if a value has been added to a set.
            <para>Runtime: O(n), Ω(1), ε(1)</para>
            </summary>
            <param name="value">The value to look for in the set.</param>
            <returns>True if the value has been added to the set or false if not.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Clear">
            <summary>
            Removes all the values in the set.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Stepper(System.Action{`0})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.Stepper(System.Func{`0,Washcloth.StepStatus})">
            <inheritdoc cref="M:Washcloth.DataStructures.DataStructure.Stepper_O_n_step_XML"/>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.GetEnumerator">
            <summary>Gets the enumerator for the set.</summary>
            <returns>The enumerator for the set.</returns>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`3.ToArray">
            <summary>
            Puts all the values in this set into an array.
            <para>Runtime: Θ(<see cref="P:Washcloth.DataStructures.SetHashLinked`3.Count"/> + <see cref="P:Washcloth.DataStructures.SetHashLinked`3.TableSize"/>)</para>
            </summary>
            <returns>An array with all the values in the set.</returns>
        </member>
        <member name="T:Washcloth.DataStructures.SetHashLinked`1">
            <summary>An unsorted structure of unique items implemented as a hashed table of linked lists.</summary>
            <typeparam name="T">The type of values to store in the set.</typeparam>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a hashed set.
            <para>Runtime: O(1)</para>
            </summary>
            <param name="equate">The equate delegate.</param>
            <param name="hash">The hashing function.</param>
            <param name="expectedCount">The expected count of the set.</param>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`1.#ctor(Washcloth.DataStructures.SetHashLinked{`0})">
            <summary>
            This constructor is for cloning purposes.
            <para>Runtime: O(n)</para>
            </summary>
            <param name="set">The set to clone.</param>
        </member>
        <member name="P:Washcloth.DataStructures.SetHashLinked`1.Hash">
            <summary>
            The delegate for computing hash codes.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="P:Washcloth.DataStructures.SetHashLinked`1.Equate">
            <summary>
            The delegate for equality checking.
            <para>Runtime: O(1)</para>
            </summary>
        </member>
        <member name="M:Washcloth.DataStructures.SetHashLinked`1.Clone">
            <summary>
            Creates a shallow clone of this set.
            <para>Runtime: Θ(n)</para>
            </summary>
            <returns>A shallow clone of this set.</returns>
        </member>
        <member name="T:Washcloth.MathematicsException">
            <summary>Represents an exception in mathematical computation.</summary>
        </member>
        <member name="M:Washcloth.MathematicsException.#ctor(System.String)">
            <summary>Represents an exception in mathematical computation.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Washcloth.MathematicsException.#ctor(System.String,System.Exception)">
            <summary>Represents an exception in mathematical computation.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Washcloth.TowelBugException">
            <summary>Represents a bug in the Towel project. Please report it.</summary>
        </member>
        <member name="M:Washcloth.TowelBugException.#ctor(System.String)">
            <summary>Represents a bug in the Towel project. Please report it.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Washcloth.TowelBugException.#ctor(System.String,System.Exception)">
            <summary>Represents a bug in the Towel project. Please report it.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Washcloth.CorruptedDataStructureException">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
        </member>
        <member name="M:Washcloth.CorruptedDataStructureException.#ctor">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
        </member>
        <member name="M:Washcloth.CorruptedDataStructureException.#ctor(System.String)">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Washcloth.CorruptedDataStructureException.#ctor(System.String,System.Exception)">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Washcloth.InequalitySyntaxException">
            <summary>Thrown when the inequality syntax is missused.</summary>
        </member>
        <member name="M:Washcloth.InequalitySyntaxException.#ctor">
            <summary>Thrown when the inequality syntax is missused.</summary>
        </member>
        <member name="M:Washcloth.InequalitySyntaxException.#ctor(System.String)">
            <summary>Thrown when the inequality syntax is missused.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Washcloth.InequalitySyntaxException.#ctor(System.String,System.Exception)">
            <summary>Thrown when the inequality syntax is missused.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Washcloth.DocumentationMethodException">
            <summary>Thrown when an internal documentation method is called.</summary>
        </member>
        <member name="M:Washcloth.DocumentationMethodException.#ctor">
            <summary>Thrown when an internal documentation method is called.</summary>
        </member>
        <member name="M:Washcloth.DocumentationMethodException.#ctor(System.String)">
            <summary>Thrown when an internal documentation method is called.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Washcloth.DocumentationMethodException.#ctor(System.String,System.Exception)">
            <summary>Thrown when an internal documentation method is called.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Washcloth.Extensions">
            <summary>Contains Extension methods on common System types.</summary>
        </member>
        <member name="M:Washcloth.Extensions.Replace(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>Returns a new <see cref="T:System.String"/> in which all occurrences of Unicode <see cref="T:System.String"/> patterns in this instance are replaced with a relative Unicode <see cref="T:System.String"/> replacements.</summary>
            <remarks>Uses Regex without a timeout.</remarks>
            <param name="this">The <see cref="T:System.String"/> to perform the replacements on.</param>
            <param name="rules">The patterns and relative replacements to apply to this <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> in which all occurrences of Unicode <see cref="T:System.String"/> patterns in this instance are replaced with a relative Unicode <see cref="T:System.String"/> replacements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any of the parameters are null or contain null values.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="rules"/> is empty, <paramref name="rules"/> contains empty patterns, or <paramref name="rules"/> contains duplicate patterns.</exception>
        </member>
        <member name="M:Washcloth.Extensions.ReplaceCached(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>Returns a new <see cref="T:System.String"/> in which all occurrences of Unicode <see cref="T:System.String"/> patterns in this instance are replaced with a relative Unicode <see cref="T:System.String"/> replacements. Caches internal values relative to the instance of rules.</summary>
            <remarks>Uses Regex without a timeout. This method is not thread-safe.</remarks>
            <param name="this">The <see cref="T:System.String"/> to perform the replacements on.</param>
            <param name="rules">The patterns and relative replacements to apply to this <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> in which all occurrences of Unicode <see cref="T:System.String"/> patterns in this instance are replaced with a relative Unicode <see cref="T:System.String"/> replacements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any of the parameters are null or contain null values.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="rules"/> is empty, <paramref name="rules"/> contains empty patterns, or <paramref name="rules"/> contains duplicate patterns.</exception>
        </member>
        <member name="F:Washcloth.Extensions.ReplaceCachedCache">
            <summary>Cache for the <see cref="M:Washcloth.Extensions.ReplaceCached(System.String,System.ValueTuple{System.String,System.String}[])"/> method.</summary>
        </member>
        <member name="M:Washcloth.Extensions.ClearReplaceCache">
            <summary>Clears the cache for the <see cref="M:Washcloth.Extensions.ReplaceCached(System.String,System.ValueTuple{System.String,System.String}[])"/> method.</summary>
        </member>
        <member name="M:Washcloth.Extensions.RemoveFromReplaceCache(System.ValueTuple{System.String,System.String}[])">
            <summary>Removes a rule set from the <see cref="M:Washcloth.Extensions.ReplaceCached(System.String,System.ValueTuple{System.String,System.String}[])"/> method cache if it exists.</summary>
            <param name="rules">The rule set to remove from the cache.</param>
        </member>
        <member name="M:Washcloth.Extensions.ContainsAny(System.String,System.Char[])">
            <summary>Checks if a string contains any of a collections on characters.</summary>
            <param name="string">The string to see if it contains any of the specified characters.</param>
            <param name="chars">The characters to check if the string contains any of them.</param>
            <returns>True if the string contains any of the provided characters. False if not.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StandardizeNewLines(System.String)">
            <summary>Removes carriage returns and then replaces all new line characters with System.Environment.NewLine.</summary>
            <param name="string">The string to standardize the new lines of.</param>
            <returns>The new line standardized string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Repeat(System.String,System.Int32)">
            <summary>Creates a string of a repreated string a provided number of times.</summary>
            <param name="string">The string to repeat.</param>
            <param name="count">The number of repetitions of the string to repeat.</param>
            <returns>The string of the repeated string to repeat.</returns>
        </member>
        <member name="M:Washcloth.Extensions.SplitLines(System.String)">
            <summary>Splits the string into the individual lines.</summary>
            <param name="string">The string to get the lines of.</param>
            <returns>an array of the individual lines of the string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.IndentLines(System.String)">
            <summary>Indents every line in a string with a single tab character.</summary>
            /// <param name="string">The string to indent the lines of.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.IndentLines(System.String,System.Int32)">
            <summary>Indents every line in a string with a given number of tab characters.</summary>
            <param name="string">The string to indent the lines of.</param>
            <param name="count">The number of tabs of the indention.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.IndentLineNumbers(System.String,System.Int32,System.Int32)">
            <summary>Indents a range of line numbers in a string.</summary>
            <param name="string">The string to indent specified lines of.</param>
            <param name="startingLineNumber">The line number to start line indention on.</param>
            <param name="endingLineNumber">The line number to stop line indention on.</param>
            <returns>The string with the specified lines indented.</returns>
        </member>
        <member name="M:Washcloth.Extensions.IndentLineNumbers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Indents a range of line numbers in a string.</summary>
            <param name="string">The string to indent specified lines of.</param>
            <param name="count">The number of tabs for the indention.</param>
            <param name="startingLineNumber">The line number to start line indention on.</param>
            <param name="endingLineNumber">The line number to stop line indention on.</param>
            <returns>The string with the specified lines indented.</returns>
        </member>
        <member name="M:Washcloth.Extensions.PadLinesLeft(System.String,System.String)">
            <summary>Adds a string onto the beginning of every line in a string.</summary>
            <param name="string">The string to pad.</param>
            <param name="padding">The padding to add to the front of every line.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.PadSubstringLinesRight(System.String,System.String)">
            <summary>Adds a string onto the end of every line in a string.</summary>
            <param name="string">The string to pad.</param>
            <param name="padding">The padding to add to the front of every line.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.PadLinesLeft(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string after every new line squence found between two indeces of a string.</summary>
            <param name="string">The string to be padded.</param>
            <param name="padding">The padding to apply after every newline sequence found.</param>
            <param name="startingLineNumber">The starting index of the line in the string to pad.</param>
            <param name="endingLineNumber">The ending index of the line in the string to pad.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.PadLinesRight(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string before every new line squence found between two indeces of a string.</summary>
            <param name="string">The string to be padded.</param>
            <param name="padding">The padding to apply before every newline sequence found.</param>
            <param name="startingLineNumber">The starting index of the line in the string to pad.</param>
            <param name="endingLineNumber">The ending index of the line in the string to pad.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Reverse(System.String)">
            <summary>Reverses the characters in a string.</summary>
            <param name="string">The string to reverse the characters of.</param>
            <returns>The reversed character string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Remove(System.String,System.Predicate{System.Char})">
            <summary>Removes all the characters from a string based on a predicate.</summary>
            <param name="string">The string to remove characters from.</param>
            <param name="where">The predicate determining removal of each character.</param>
            <returns>The string after removing any predicated characters.</returns>
        </member>
        <member name="M:Washcloth.Extensions.CountLines(System.String)">
            <summary>Counts the number of lines in the string.</summary>
            <param name="str">The string to get the line count of.</param>
            <returns>The number of lines in the string.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``2(``0[],``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],System.Action{``0})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StepperRef``2(``0[],``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],Washcloth.StepRef{``0})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StepperBreak``2(``0[],``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],System.Func{``0,Washcloth.StepStatus})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],Washcloth.StepRefBreak{``0})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StepperRefBreak``2(``0[],``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``2(``0[],System.Int32,System.Int32,``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],System.Int32,System.Int32,System.Action{``0})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StepperRef``2(``0[],System.Int32,System.Int32,``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],System.Int32,System.Int32,Washcloth.StepRef{``0})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StepperBreak``2(``0[],System.Int32,System.Int32,``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],System.Int32,System.Int32,System.Func{``0,Washcloth.StepStatus})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Stepper``1(``0[],System.Int32,System.Int32,Washcloth.StepRefBreak{``0})">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.StepperRefBreak``2(``0[],System.Int32,System.Int32,``1)">
            <summary>Traverses an array and performs an operation on each value.</summary>
            <typeparam name="T">The element type in the array.</typeparam>
            <typeparam name="Step">The operation to perform on each value of th traversal.</typeparam>
            <param name="array">The array to traverse.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The non-inclusive ending index.</param>
            <param name="step">The operation to perform on each value of th traversal.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Washcloth.Extensions.BuildArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>Builds an array from a size and initialization delegate.</summary>
            <typeparam name="T">The generic type of the array.</typeparam>
            <param name="size">The size of the array to build.</param>
            <param name="func">The initialization pattern.</param>
            <returns>The built array.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Format``1(``0[],``0)">
            <summary>Formats an array so that all values are the same.</summary>
            <typeparam name="T">The generic type of the array to format.</typeparam>
            <param name="array">The array to format.</param>
            <param name="value">The value to format all entries in the array with.</param>
        </member>
        <member name="M:Washcloth.Extensions.Format``1(``0[],System.Func{System.Int32,``0})">
            <summary>Formats an array so that all values are the same.</summary>
            <typeparam name="T">The generic type of the array to format.</typeparam>
            <param name="array">The array to format.</param>
            <param name="func">The per-index format function.</param>
        </member>
        <member name="M:Washcloth.Extensions.ConstructRectangularJaggedArray``1(System.Int32,System.Int32)">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="length1">The length of the first dimension.</param>
            <param name="length2">The length of the second dimension.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ConstructRectangularJaggedArray``1(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="length1">The length of the first dimension.</param>
            <param name="length2">The length of the second dimension.</param>
            <param name="func">The function to initialize the values with.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ConstructSquareJaggedArray``1(System.Int32)">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="sideLength">The length of each dimension.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ConstructSquareJaggedArray``1(System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="sideLength">The length of each dimension.</param>
            <param name="func">The function to initialize the values with.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Time_DateTime(System.Action)">
            <summary>Times an action using System.DateTime.</summary>
            <param name="action">The action to time.</param>
            <returns>The TimeSpan the action took to complete.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Time_StopWatch(System.Action)">
            <summary>Times an action using System.Diagnostics.Stopwatch.</summary>
            <param name="action">The action to time.</param>
            <returns>The TimeSpan the action took to complete.</returns>
        </member>
        <member name="M:Washcloth.Extensions.TryFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>Tries to get the first value in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">The generic type of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="iEnumerable">The IEnumerable to try to get the first value of.</param>
            <param name="first">The first value of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or default if empty.</param>
            <returns>True if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> has a first value or false if it is empty.</returns>
        </member>
        <member name="M:Washcloth.Extensions.CreateDelegate``1(System.Reflection.MethodInfo)">
            <summary>Creates a delegate of the specified type from this <see cref="T:System.Reflection.MethodInfo"/>.</summary>
            <typeparam name="Delegate">The type of the delegate to create.</typeparam>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> to create the delegate from.</param>
            <returns>The delegate for this <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>This extension is syntax sugar so you don't have to cast the return.</remarks>
        </member>
        <member name="M:Washcloth.Extensions.IsDefined``1(``0)">
            <summary>Returns an indication whether a constant with a specified value exists in a specified enumeration.</summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The value to determine if it is defined.</param>
            <returns>true if a constant in enumType has a value equal to value; otherwise, false.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Gaps``1(System.Action{``0},System.Action{``0})">
            <summary>Adds a step to the gaps (in-betweens) of another step funtion.</summary>
            <typeparam name="T">The generic type of the step function.</typeparam>
            <param name="step">The step to add a gap step to.</param>
            <param name="gapStep">The step to perform in the gaps.</param>
            <returns>The combined step + gapStep function.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Convert``2(System.Action{System.Action{``0}},System.Func{``0,``1})">
            <summary>Converts the values in this stepper to another type.</summary>
            <typeparam name="A">The generic type of the values of the original stepper.</typeparam>
            <typeparam name="B">The generic type of the values to convert the stepper into.</typeparam>
            <param name="stepper">The stepper to convert.</param>
            <param name="func">The conversion function.</param>
            <returns>The converted stepper.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Append``1(System.Action{System.Action{``0}},``0[])">
            <summary>Appends values to the stepper.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to append to.</param>
            <param name="values">The values to append to the stepper.</param>
            <returns>The resulting stepper with the appended values.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Build``1(``0[])">
            <summary>Builds a stepper from values.</summary>
            <typeparam name="T">The generic type of the stepper to build.</typeparam>
            <param name="values">The values to build the stepper from.</param>
            <returns>The resulting stepper function for the provided values.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Concat``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}}[])">
            <summary>Concatenates steppers.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The first stepper of the contactenation.</param>
            <param name="otherSteppers">The other steppers of the concatenation.</param>
            <returns>The concatenated steppers as a single stepper.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Where``1(System.Action{System.Action{``0}},System.Func{``0,System.Boolean})">
            <summary>Filters a stepper using a where predicate.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to filter.</param>
            <param name="predicate">The predicate of the where filter.</param>
            <returns>The filtered stepper.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Iterate(System.Int32,System.Action{System.Int32})">
            <summary>Steps through a set number of integers.</summary>
            <param name="iterations">The number of times to iterate.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Washcloth.Extensions.ToStepper``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an IEnumerable into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="iEnumerable">The IEnumerable to convert.</param>
            <returns>The stepper delegate comparable to the IEnumerable provided.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ToStepperBreak``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an IEnumerable into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="iEnumerable">The IEnumerable to convert.</param>
            <returns>The stepper delegate comparable to the IEnumerable provided.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ToStepperRef``1(``0[])">
            <summary>Converts an array into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="array">The array to convert.</param>
            <returns>The stepper delegate comparable to the array provided.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ToStepperRefBreak``1(``0[])">
            <summary>Converts an array into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="array">The array to convert.</param>
            <returns>The stepper delegate comparable to the array provided.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ToArray``1(System.Action{System.Action{``0}})">
            <summary>Converts the stepper into an array.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to convert.</param>
            <returns>The array created from the stepper.</returns>
        </member>
        <member name="M:Washcloth.Extensions.Count``1(System.Action{System.Action{``0}})">
            <summary>Counts the number of items in the stepper.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to count the items of.</param>
            <returns>The number of items in the stepper.</returns>
        </member>
        <member name="M:Washcloth.Extensions.EveryNth``1(System.Action{System.Action{``0}},System.Int32)">
            <summary>Reduces the stepper to be every nth value.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to reduce.</param>
            <param name="nth">Represents the values to reduce the stepper to; "5" means every 5th value.</param>
            <returns>The reduced stepper function.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ContainsDuplicates``1(System.Func{System.Func{``0,Washcloth.StepStatus},Washcloth.StepStatus},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <param name="equate">An equality function for the data</param>
            <param name="hash">A hashing function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ContainsDuplicates``1(System.Action{System.Action{``0}},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <param name="equate">An equality function for the data</param>
            <param name="hash">A hashing function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
            <remarks>Use the StepperBreak overload if possible. It is more effiecient.</remarks>
        </member>
        <member name="M:Washcloth.Extensions.ContainsDuplicates``1(System.Func{System.Func{``0,Washcloth.StepStatus},Washcloth.StepStatus})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
        </member>
        <member name="M:Washcloth.Extensions.ContainsDuplicates``1(System.Action{System.Action{``0}})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
            <remarks>Use the StepperBreak overload if possible. It is more effiecient.</remarks>
        </member>
        <member name="M:Washcloth.Extensions.Any``1(System.Action{System.Action{``0}},System.Predicate{``0})">
            <summary>Determines if the stepper contains any of the predicated values.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to determine if any predicated values exist.</param>
            <param name="where">The predicate.</param>
            <returns>True if any of the predicated values exist or </returns>
        </member>
        <member name="M:Washcloth.Extensions.Any``1(System.Func{System.Func{``0,Washcloth.StepStatus},Washcloth.StepStatus},System.Predicate{``0})">
            <summary>Determines if the stepper contains any of the predicated values.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to determine if any predicated values exist.</param>
            <param name="where">The predicate.</param>
            <returns>True if any of the predicated values exist or </returns>
        </member>
        <member name="M:Washcloth.Extensions.ConcatToString(System.Action{System.Action{System.Char}})">
            <summary>Converts a stepper into a string of the concatenated chars.</summary>
            <param name="stepper">The stepper to concatenate the values into a string.</param>
            <returns>The string of the concatenated chars.</returns>
        </member>
        <member name="T:Washcloth.IAction">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction.Do">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`1">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`1.Do(`0)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`2">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`2.Do(`0,`1)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`3">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`3.Do(`0,`1,`2)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`4">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`4.Do(`0,`1,`2,`3)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`5">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`5.Do(`0,`1,`2,`3,`4)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`6">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`6.Do(`0,`1,`2,`3,`4,`5)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IAction`7">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IAction`7.Do(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`1">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`1.Do">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`2">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`2.Do(`0)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`3">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`3.Do(`0,`1)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`4">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`4.Do(`0,`1,`2)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`5">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`5.Do(`0,`1,`2,`3)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`6">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`6.Do(`0,`1,`2,`3,`4)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`7">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`7.Do(`0,`1,`2,`3,`4,`5)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.IFunc`8">
            <summary>Encapsulates a method.</summary>
        </member>
        <member name="M:Washcloth.IFunc`8.Do(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Invocation of the method.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime.Do">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime.op_Implicit(System.Action)~Washcloth.ActionRuntime">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`1">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`1._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`1.Do(`0)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`1.op_Implicit(System.Action{`0})~Washcloth.ActionRuntime{`0}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`2">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`2._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`2.Do(`0,`1)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`2.op_Implicit(System.Action{`0,`1})~Washcloth.ActionRuntime{`0,`1}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`3">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`3._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`3.Do(`0,`1,`2)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`3.op_Implicit(System.Action{`0,`1,`2})~Washcloth.ActionRuntime{`0,`1,`2}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`4">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`4._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`4.Do(`0,`1,`2,`3)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`4.op_Implicit(System.Action{`0,`1,`2,`3})~Washcloth.ActionRuntime{`0,`1,`2,`3}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`5">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`5._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`5.Do(`0,`1,`2,`3,`4)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`5.op_Implicit(System.Action{`0,`1,`2,`3,`4})~Washcloth.ActionRuntime{`0,`1,`2,`3,`4}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`6">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`6._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`6.Do(`0,`1,`2,`3,`4,`5)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`6.op_Implicit(System.Action{`0,`1,`2,`3,`4,`5})~Washcloth.ActionRuntime{`0,`1,`2,`3,`4,`5}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.ActionRuntime`7">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.ActionRuntime`7._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`7.Do(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.ActionRuntime`7.op_Implicit(System.Action{`0,`1,`2,`3,`4,`5,`6})~Washcloth.ActionRuntime{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`1">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`1._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`1.Do">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`1.op_Implicit(System.Func{`0})~Washcloth.FuncRuntime{`0}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`2">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`2._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`2.Do(`0)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`2.op_Implicit(System.Func{`0,`1})~Washcloth.FuncRuntime{`0,`1}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`3">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`3._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`3.Do(`0,`1)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`3.op_Implicit(System.Func{`0,`1,`2})~Washcloth.FuncRuntime{`0,`1,`2}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`4">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`4._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`4.Do(`0,`1,`2)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`4.op_Implicit(System.Func{`0,`1,`2,`3})~Washcloth.FuncRuntime{`0,`1,`2,`3}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`5">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`5._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`5.Do(`0,`1,`2,`3)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`5.op_Implicit(System.Func{`0,`1,`2,`3,`4})~Washcloth.FuncRuntime{`0,`1,`2,`3,`4}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`6">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`6._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`6.Do(`0,`1,`2,`3,`4)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`6.op_Implicit(System.Func{`0,`1,`2,`3,`4,`5})~Washcloth.FuncRuntime{`0,`1,`2,`3,`4,`5}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`7">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`7._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`7.Do(`0,`1,`2,`3,`4,`5)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`7.op_Implicit(System.Func{`0,`1,`2,`3,`4,`5,`6})~Washcloth.FuncRuntime{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.FuncRuntime`8">
            <summary>Encapsulates a delegate.</summary>
        </member>
        <member name="F:Washcloth.FuncRuntime`8._delegate">
            <summary>The delegate instance.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`8.Do(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Invocation of the delegate.</summary>
        </member>
        <member name="M:Washcloth.FuncRuntime`8.op_Implicit(System.Func{`0,`1,`2,`3,`4,`5,`6,`7})~Washcloth.FuncRuntime{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Implicit caster from a delegate.</summary>
        </member>
        <member name="T:Washcloth.Meta">
            <summary>Constains static analysis methods of the code (reflection).</summary>
        </member>
        <member name="M:Washcloth.Meta.GetTryParseMethod``1">
            <summary>Gets the TryParse <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> TryParse(<see cref="T:System.String"/>, out <typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetTryParseMethod(System.Type)">
            <summary>Gets the TryParse <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> TryParse(<see cref="T:System.String"/>, out <paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetFactorialMethod``1">
            <summary>Gets the Factorial <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> Factorial(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsPrime <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetFactorialMethod(System.Type)">
            <summary>Gets the Factorial <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> Factorial(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsPrimeMethod``1">
            <summary>Gets the IsPrime <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPrime(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsPrime <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsPrimeMethod(System.Type)">
            <summary>Gets the IsPrime <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPrime(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsNonNegativeMethod``1">
            <summary>Gets the IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNonNegative(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsNonNegativeMethod(System.Type)">
            <summary>Gets the IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNonNegative(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsNegativeMethod``1">
            <summary>Gets the IsNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNegative(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsNegativeMethod(System.Type)">
            <summary>Gets the IsNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNegative(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsPositiveMethod``1">
            <summary>Gets the IsPositive <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPositive(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsPositive <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsPositiveMethod(System.Type)">
            <summary>Gets the IsPositive <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPositive(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsPositive <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsEvenMethod``1">
            <summary>Gets the IsEven <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsEven(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsEven <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsEvenMethod(System.Type)">
            <summary>Gets the IsEven <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsEven(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsEven <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsOddMethod``1">
            <summary>Gets the IsOdd <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsOdd(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The IsOdd <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsOddMethod(System.Type)">
            <summary>Gets the IsOdd <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsOdd(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsOdd <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsIntegerMethod``1">
            <summary>Gets the IsInteger <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsInteger(<typeparamref name="A"/>)].</summary>
            <typeparam name="A">The type of the out parameter.</typeparam>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetIsIntegerMethod(System.Type)">
            <summary>Gets the IsInteger <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsInteger(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetLessThanMethod``3">
            <summary>Determines if an op_LessThan member exists.</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <returns>True if the op_LessThan member exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetLessThanMethod(System.Type,System.Type,System.Type)">
            <summary>Determines if an op_LessThan member exists.</summary>
            <param name="a">The type of the left operand.</param>
            <param name="b">The type of the right operand.</param>
            <param name="c">The type of the return.</param>
            <returns>True if the op_LessThan member exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetGreaterThanMethod``3">
            <summary>Determines if an op_GreaterThan member exists.</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <returns>True if the op_GreaterThan member exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetGreaterThanMethod(System.Type,System.Type,System.Type)">
            <summary>Determines if an op_GreaterThan member exists.</summary>
            <param name="a">The type of the left operand.</param>
            <param name="b">The type of the right operand.</param>
            <param name="c">The type of the return.</param>
            <returns>True if the op_GreaterThan member exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.HasImplicitCast``2">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <typeparam name="From">The parameter type of the implicit casting operator.</typeparam>
            <typeparam name="To">The return type fo the implicit casting operator.</typeparam>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.HasExplicitCast``2">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <typeparam name="From">The parameter type of the implicit casting operator.</typeparam>
            <typeparam name="To">The return type fo the implicit casting operator.</typeparam>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.HasImplicitCast(System.Type,System.Type)">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <param name="fromType">The parameter type of the implicit casting operator.</param>
            <param name="toType">The return type fo the implicit casting operator.</param>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.HasExplicitCast(System.Type,System.Type)">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <param name="fromType">The parameter type of the implicit casting operator.</param>
            <param name="toType">The return type fo the implicit casting operator.</param>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Washcloth.Meta.ConvertToCSharpSource(System.Type,System.Boolean)">
            <summary>Converts a <see cref="T:System.Type"/> into a <see cref="T:System.String"/> as it would appear in C# source code.</summary>
            <param name="type">The <see cref="T:System.Type"/> to convert to a <see cref="T:System.String"/>.</param>
            <param name="showGenericParameters">If the generic parameters are the generic types, whether they should be shown or not.</param>
            <returns>The <see cref="T:System.String"/> as the <see cref="T:System.Type"/> would appear in C# source code.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetEnumAttribute``1(System.Enum)">
            <summary>Gets a custom attribute on an enum value by generic type.</summary>
            <typeparam name="AttributeType">The type of attribute to get.</typeparam>
            <param name="enum">The enum value to get the attribute of.</param>
            <returns>The attribute on the enum value of the provided type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetEnumAttributes``1(System.Enum)">
            <summary>Gets custom attributes on an enum value by generic type.</summary>
            <typeparam name="AttributeType">The type of attribute to get.</typeparam>
            <param name="enum">The enum value to get the attribute of.</param>
            <returns>The attributes on the enum value of the provided type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetEventInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the events with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the events of.</param>
            <returns>The IEnumerable of the events with the provided attribute type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetConstructorInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the constructors with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the constructors of.</param>
            <returns>The IEnumerable of the constructors with the provided attribute type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetPropertyInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the properties with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the properties of.</param>
            <returns>The IEnumerable of the properties with the provided attribute type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetFieldInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the fields with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the fields of.</param>
            <returns>The IEnumerable of the fields with the provided attribute type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetMethodInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the methods with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the methods of.</param>
            <returns>The IEnumerable of the methods with the provided attribute type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetTypesWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the types with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the types of.</param>
            <returns>The IEnumerable of the types with the provided attribute type.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetDerivedTypes``1(System.Reflection.Assembly)">
            <summary>Gets all the types in an assembly that derive from a base.</summary>
            <typeparam name="Base">The base type to get the deriving types of.</typeparam>
            <param name="assembly">The assmebly to perform the search on.</param>
            <returns>The IEnumerable of the types that derive from the provided base.</returns>
        </member>
        <member name="M:Washcloth.Meta.GetDirectoryPath(System.Reflection.Assembly)">
            <summary>Gets the file path of an assembly.</summary>
            <param name="assembly">The assembly to get the file path of.</param>
            <returns>The file path of the assembly.</returns>
        </member>
        <member name="M:Washcloth.Meta.LoadXmlDocumentation(System.String)">
            <summary>Loads the XML code documentation into memory so it can be accessed by extension methods on reflection types.</summary>
            <param name="xmlDocumentation">The content of the XML code documentation.</param>
        </member>
        <member name="M:Washcloth.Meta.LoadXmlDocumentation(System.IO.TextReader)">
            <summary>Loads the XML code documentation into memory so it can be accessed by extension methods on reflection types.</summary>
            <param name="textReader">The text reader to process in an XmlReader.</param>
        </member>
        <member name="M:Washcloth.Meta.ClearXmlDocumentation">
            <summary>Clears the currently loaded XML documentation.</summary>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Type)">
            <summary>Gets the XML documentation on a type.</summary>
            <param name="type">The type to get the XML documentation of.</param>
            <returns>The XML documentation on the type.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>Gets the XML documentation on a method.</summary>
            <param name="methodInfo">The method to get the XML documentation of.</param>
            <returns>The XML documentation on the method.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.ConstructorInfo)">
            <summary>Gets the XML documentation on a constructor.</summary>
            <param name="constructorInfo">The constructor to get the XML documentation of.</param>
            <returns>The XML documentation on the constructor.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.PropertyInfo)">
            <summary>Gets the XML documentation on a property.</summary>
            <param name="propertyInfo">The property to get the XML documentation of.</param>
            <returns>The XML documentation on the property.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.FieldInfo)">
            <summary>Gets the XML documentation on a field.</summary>
            <param name="fieldInfo">The field to get the XML documentation of.</param>
            <returns>The XML documentation on the field.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.EventInfo)">
            <summary>Gets the XML documentation on an event.</summary>
            <param name="eventInfo">The event to get the XML documentation of.</param>
            <returns>The XML documentation on the event.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>Gets the XML documentation on a member.</summary>
            <param name="memberInfo">The member to get the XML documentation of.</param>
            <returns>The XML documentation on the member.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Washcloth.Meta.GetDocumentation(System.Reflection.ParameterInfo)">
            <summary>Gets the XML documentation for a parameter.</summary>
            <param name="parameterInfo">The parameter to get the XML documentation for.</param>
            <returns>The XML documenation of the parameter.</returns>
        </member>
        <member name="M:Washcloth.Meta.IsLocalFunction(System.Reflection.MethodInfo)">
            <summary>Determines if a MethodInfo is a local function.</summary>
            <param name="methodInfo">The method info to determine if it is a local function.</param>
            <returns>True if the MethodInfo is a local function. False if not.</returns>
        </member>
        <member name="T:Washcloth.Statics">
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
        </member>
        <member name="M:Washcloth.Statics.Quant``1(``0[])">
            <summary>Universal Quantification Operator.</summary>
            <typeparam name="T">The element type of the universal quantification to declare.</typeparam>
            <param name="values">The values of the universal quantification.</param>
            <returns>The declared universal quantification.</returns>
        </member>
        <member name="T:Washcloth.Statics.UniversalQuantification`1">
            <summary>Universal Quantification.</summary>
            <typeparam name="T">The element type of the universal quantification.</typeparam>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.#ctor(`0[])">
            <summary>Constructs a new universal quantification from an array.</summary>
            <param name="array">The array value of the universal quantification.</param>
        </member>
        <member name="P:Washcloth.Statics.UniversalQuantification`1.Length">
            <summary>The number of values in this universal quantification.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Stepper(System.Action{`0})">
            <summary>Iterates each value in this universal quantification and performs an action for each element.</summary>
            <param name="step">The action to perform on every step of the iteration.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Stepper(System.Func{`0,Washcloth.StepStatus})">
            <summary>Iterates each value in this universal quantification and performs an action for each element.</summary>
        </member>
        <member name="P:Washcloth.Statics.UniversalQuantification`1.Item(System.Int32)">
            <summary>Index property for get/set operations.</summary>
            <param name="index">The index to get/set.</param>
            <returns>The value at the provided index.</returns>
        </member>
        <member name="P:Washcloth.Statics.UniversalQuantification`1.Count">
            <summary>Gets the number of elements in this universal quantification.</summary>
        </member>
        <member name="P:Washcloth.Statics.UniversalQuantification`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Add(`0)">
            <summary>Adds an item to this universal quantifier.</summary>
            <param name="item">The item to add to this universal quantifier.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Clear">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Contains(`0)">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.CopyTo(`0[],System.Int32)">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.IndexOf(`0)">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Insert(System.Int32,`0)">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.Remove(`0)">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.RemoveAt(System.Int32)">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.GetEnumerator">
            <summary>Gets the <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this universal quantification.</summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this universal quantification.</returns>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~`0[]">
            <summary>Converts a universal quantification to an array.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Collections.Generic.List{`0}">
            <summary>Converts a universal quantification to a <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Collections.Generic.HashSet{`0}">
            <summary>Converts a universal quantification to an <see cref="T:System.Collections.Generic.HashSet`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Collections.Generic.LinkedList{`0}">
            <summary>Converts a universal quantification to a <see cref="T:System.Collections.Generic.LinkedList`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Collections.Generic.Stack{`0}">
            <summary>Converts a universal quantification to an <see cref="T:System.Collections.Generic.Stack`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Collections.Generic.Queue{`0}">
            <summary>Converts a universal quantification to an <see cref="T:System.Collections.Generic.Queue`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Collections.Generic.SortedSet{`0}">
            <summary>Converts a universal quantification to a sorted <see cref="T:System.Collections.Generic.SortedSet`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Action{System.Action{`0}}">
            <summary>Converts a universal quantification to an Action&lt;Action&lt;T&gt;&gt;.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~Washcloth.StepperRef{`0}">
            <summary>Converts a universal quantification to an <see cref="T:Washcloth.StepperRef`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~System.Func{System.Func{`0,Washcloth.StepStatus},Washcloth.StepStatus}">
            <summary>Converts a universal quantification to an Func&lt;Func&lt;T, StepStatus&gt;, StepStatus&gt;.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Washcloth.Statics.UniversalQuantification`1.op_Implicit(Washcloth.Statics.UniversalQuantification{`0})~Washcloth.StepperRefBreak{`0}">
            <summary>Converts a universal quantification to an <see cref="T:Washcloth.StepperRefBreak`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="T:Washcloth.Statics.IntCompare">
            <summary>Default int compare.</summary>
        </member>
        <member name="M:Washcloth.Statics.IntCompare.Do(System.Int32,System.Int32)">
            <summary>Default int compare.</summary>
            <param name="a">The left hand side of the compare.</param>
            <param name="b">The right ahnd side of the compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:Washcloth.Statics.CharEquate">
            <summary>Compares two char values for equality.</summary>
        </member>
        <member name="M:Washcloth.Statics.CharEquate.Do(System.Char,System.Char)">
            <summary>Compares two char values for equality.</summary>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <returns>True if equal; False if not.</returns>
        </member>
        <member name="T:Washcloth.Statics.SiftFromCompareAndValue`2">
            <summary>Built in Compare struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values to compare.</typeparam>
            <typeparam name="Compare">The compare function.</typeparam>
        </member>
        <member name="M:Washcloth.Statics.SiftFromCompareAndValue`2.Do(`0)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.Statics.SiftFromCompareAndValue`2.#ctor(`0,`1)">
            <summary>Creates a compile-time-resolved sifting function to be passed into another type.</summary>
            <param name="value">The value for future values to be compared against.</param>
            <param name="compare">The compare function.</param>
        </member>
        <member name="T:Washcloth.Statics.StepStatusContinue">
            <summary>Compile time resulution to the <see cref="F:Washcloth.StepStatus.Continue"/> value.</summary>
        </member>
        <member name="M:Washcloth.Statics.StepStatusContinue.Do">
            <summary>Returns <see cref="F:Washcloth.StepStatus.Continue"/>.</summary>
            <returns><see cref="F:Washcloth.StepStatus.Continue"/></returns>
        </member>
        <member name="T:Washcloth.Statics.RandomNextIntMinValueIntMaxValue">
            <summary>Struct wrapper for the <see cref="M:System.Random.Next(System.Int32,System.Int32)"/> method as an <see cref="T:Washcloth.IFunc`3"/>.</summary>
        </member>
        <member name="M:Washcloth.Statics.RandomNextIntMinValueIntMaxValue.Do(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Random.Next(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Washcloth.Statics.RandomNextIntMinValueIntMaxValue.op_Implicit(System.Random)~Washcloth.Statics.RandomNextIntMinValueIntMaxValue">
            <summary>Casts a <see cref="T:System.Random"/> to a struct wrapper.</summary>
        </member>
        <member name="F:Washcloth.Statics.Continue">
            <summary>Stepper was not broken.</summary>
        </member>
        <member name="F:Washcloth.Statics.Break">
            <summary>Stepper was broken.</summary>
        </member>
        <member name="F:Washcloth.Statics.Less">
            <summary>The left operand is less than the right operand.</summary>
        </member>
        <member name="F:Washcloth.Statics.Equal">
            <summary>The left operand is equal to the right operand.</summary>
        </member>
        <member name="F:Washcloth.Statics.Greater">
            <summary>The left operand is greater than the right operand.</summary>
        </member>
        <member name="F:Washcloth.Statics.Default">
            <summary>The default case in a Switch statement (true).</summary>
        </member>
        <member name="M:Washcloth.Statics.Switch(System.ValueTuple{Washcloth.Statics.SwitchSyntax.Condition,System.Action}[])">
            <summary>Syntax sugar Switch statements.</summary>
            <param name="possibleActions">The possible actions of the Switch statement.</param>
        </member>
        <member name="M:Washcloth.Statics.Switch``1(``0)">
            <summary>Syntax sugar Switch statements.</summary>
            <typeparam name="T">The generic type parameter to the Switch statement.</typeparam>
            <param name="value">The value argument of the Switch statement.</param>
            <returns>The delegate for the Switch statement.</returns>
        </member>
        <member name="T:Washcloth.Statics.SwitchSyntax">
            <summary>Definitions for Switch syntax.</summary>
        </member>
        <member name="T:Washcloth.Statics.SwitchSyntax.ParamsAction`2">
            <summary>Delegate with params intended to be used with the Switch syntax.</summary>
        </member>
        <member name="T:Washcloth.Statics.SwitchSyntax.Keyword">
            <summary>Intended to be used with Switch syntax.</summary>
        </member>
        <member name="F:Washcloth.Statics.SwitchSyntax.Keyword.Default">
            <summary>The default keyword for the the Switch syntax.</summary>
        </member>
        <member name="T:Washcloth.Statics.SwitchSyntax.Condition`1">
            <summary>Represents the result of a conditional expression inside Switch syntax.</summary>
            <typeparam name="T">The generic type of the Switch condition for equality checks.</typeparam>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition`1.Resolve(`0)">
            <summary>Resolves the condition to a bool.</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition`1.op_Implicit(`0)~Washcloth.Statics.SwitchSyntax.Condition{`0}">
            <summary>Casts a <typeparamref name="T"/> to a bool using an equality check.</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition`1.op_Implicit(System.Boolean)~Washcloth.Statics.SwitchSyntax.Condition{`0}">
            <summary>Uses the bool as the condition result.</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition`1.op_Implicit(Washcloth.Statics.SwitchSyntax.Keyword)~Washcloth.Statics.SwitchSyntax.Condition{`0}">
            <summary>Converts a keyword to a condition result (for "Default" case).</summary>
        </member>
        <member name="F:Washcloth.Statics.SwitchSyntax.Value`1.A">
            <summary>The value of this condition for an equality check.</summary>
        </member>
        <member name="T:Washcloth.Statics.SwitchSyntax.Condition">
            <summary>Represents the result of a conditional expression inside Switch syntax.</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition.Resolve">
            <summary>Resolves the condition to a bool.</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition.op_Implicit(System.Boolean)~Washcloth.Statics.SwitchSyntax.Condition">
            <summary>Uses the bool as the condition result.</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition.op_Implicit(Washcloth.Statics.SwitchSyntax.Keyword)~Washcloth.Statics.SwitchSyntax.Condition">
            <summary>Converts a keyword to a condition result (for "Default" case).</summary>
        </member>
        <member name="M:Washcloth.Statics.SwitchSyntax.Condition.op_Implicit(Washcloth.Statics.SwitchSyntax.Condition)~System.Boolean">
            <summary>Converts a condition to a bool using the Resolve method.</summary>
        </member>
        <member name="P:Washcloth.Statics.Chance">
            <summary>Allows chance syntax with "using static Towel.Syntax;".</summary>
            <example>25% Chance</example>
        </member>
        <member name="T:Washcloth.Statics.ChanceSyntax">
            <summary>Struct that allows percentage syntax that will be evaluated at runtime.</summary>
        </member>
        <member name="F:Washcloth.Statics.ChanceSyntax.Algorithm">
            <summary>The random algorithm currently being used by chance syntax.</summary>
        </member>
        <member name="M:Washcloth.Statics.ChanceSyntax.op_Modulus(System.Double,Washcloth.Statics.ChanceSyntax)">
            <summary>Creates a chance from a percentage that will be evaluated at runtime.</summary>
            <param name="percentage">The value of the percentage.</param>
            <param name="chance">The chance syntax struct object.</param>
            <returns>True if the the chance hits. False if not.</returns>
        </member>
        <member name="T:Washcloth.Statics.Inequality`1">
            <summary>Used for inequality syntax.</summary>
            <typeparam name="T">The generic type of elements the inequality is being used on.</typeparam>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_Implicit(`0)~Washcloth.Statics.Inequality{`0}">
            <summary>Contructs a new <see cref="T:Washcloth.Statics.Inequality`1"/>.</summary>
            <param name="a">The initial value of the running inequality.</param>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_GreaterThan(Washcloth.Statics.Inequality{`0},`0)">
            <summary>Adds a greater than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than operation.</param>
            <returns>A running inequality with the additonal greater than operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_LessThan(Washcloth.Statics.Inequality{`0},`0)">
            <summary>Adds a less than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than operation.</param>
            <returns>A running inequality with the additonal less than operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_GreaterThanOrEqual(Washcloth.Statics.Inequality{`0},`0)">
            <summary>Adds a greater than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than or equal operation.</param>
            <returns>A running inequality with the additonal greater than or equal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_LessThanOrEqual(Washcloth.Statics.Inequality{`0},`0)">
            <summary>Adds a less than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than or equal operation.</param>
            <returns>A running inequality with the additonal less than or equal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_Equality(Washcloth.Statics.Inequality{`0},`0)">
            <summary>Adds an equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the equal operation.</param>
            <returns>A running inequality with the additonal equal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.op_Inequality(Washcloth.Statics.Inequality{`0},`0)">
            <summary>Adds an inequal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the inequal operation.</param>
            <returns>A running inequality with the additonal inequal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.ToString">
            <summary>This member is not intended to be invoked.</summary>
            <returns>This member is not intended to be invoked.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.Equals(System.Object)">
            <summary>This member is not intended to be invoked.</summary>
            <param name="obj">This member is not intended to be invoked.</param>
            <returns>This member is not intended to be invoked.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequality`1.GetHashCode">
            <summary>This member is not intended to be invoked.</summary>
            <returns>This member is not intended to be invoked.</returns>
        </member>
        <member name="T:Washcloth.Statics.OperatorValidated">
            <summary>Helper type for inequality syntax. Contains an Inequality type that has been operator validated.</summary>
        </member>
        <member name="T:Washcloth.Statics.OperatorValidated.Inequality`1">
            <summary>Used for inequality syntax.</summary>
            <typeparam name="T">The generic type of elements the inequality is being used on.</typeparam>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_Implicit(Washcloth.Statics.OperatorValidated.Inequality{`0})~System.Boolean">
            <summary>Converts this running inequality into the result of the expression.</summary>
            <param name="inequality">The inequality to convert into the result of the expression.</param>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_GreaterThan(Washcloth.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a greater than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than operation.</param>
            <returns>A running inequality with the additonal greater than operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_LessThan(Washcloth.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a less than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than operation.</param>
            <returns>A running inequality with the additonal less than operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_GreaterThanOrEqual(Washcloth.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a greater than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than or equal operation.</param>
            <returns>A running inequality with the additonal greater than or equal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_LessThanOrEqual(Washcloth.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a less than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than or equal operation.</param>
            <returns>A running inequality with the additonal less than or equal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_Equality(Washcloth.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds an equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the equal operation.</param>
            <returns>A running inequality with the additonal equal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.op_Inequality(Washcloth.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds an inequal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the inequal operation.</param>
            <returns>A running inequality with the additonal inequal operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.ToString">
            <summary>Converts the result of this inequality to a <see cref="T:System.String"/>.</summary>
            <returns>The result of this inequality converted to a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.Equals(System.Object)">
            <summary>This member is not intended to be invoked.</summary>
            <param name="obj">This member is not intended to be invoked.</param>
            <returns>This member is not intended to be invoked.</returns>
        </member>
        <member name="M:Washcloth.Statics.OperatorValidated.Inequality`1.GetHashCode">
            <summary>This member is not intended to be invoked.</summary>
            <returns>This member is not intended to be invoked.</returns>
        </member>
        <member name="T:Washcloth.Statics.MultiplyAddImplementation`1">
            <summary>a * b + c</summary>
        </member>
        <member name="T:Washcloth.Statics.D_subtract_A_multiply_B_divide_C`1">
            <summary>d - a * b / c</summary>
        </member>
        <member name="M:Washcloth.Statics.Swap``1(``0@,``0@)">
            <summary>Swaps two values.</summary>
            <typeparam name="T">The type of values to swap.</typeparam>
            <param name="a">The first value of the swap.</param>
            <param name="b">The second value of the swap.</param>
        </member>
        <member name="M:Washcloth.Statics.sourcefilepath(System.String)">
            <summary>Gets the file path of the current location in source code.</summary>
            <param name="DEFAULT">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>.</param>
            <returns>The file path of the current location in source code.</returns>
        </member>
        <member name="M:Washcloth.Statics.sourcemembername(System.String)">
            <summary>Gets the member name of the current location in source code.</summary>
            <param name="DEFAULT">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
            <returns>The member name of the current location in source code.</returns>
        </member>
        <member name="M:Washcloth.Statics.sourcelinenumber(System.Int32)">
            <summary>Gets the line number of the current location in source code.</summary>
            <param name="DEFAULT">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/>.</param>
            <returns>The line number of the current location in source code.</returns>
        </member>
        <member name="M:Washcloth.Statics.TryParse``1(System.String)">
            <summary>Tries to parse a <see cref="T:System.String"/> into a value of the type <typeparamref name="A"/>.</summary>
            <typeparam name="A">The type to parse the <see cref="T:System.String"/> into a value of.</typeparam>
            <param name="string">The <see cref="T:System.String"/> to parse into a value ot type <typeparamref name="A"/>.</param>
            <returns>
            (<see cref="T:System.Boolean"/> Success, <typeparamref name="A"/> Value)
            <para>- <see cref="T:System.Boolean"/> Success: True if the parse was successful; False if not.</para>
            <para>- <typeparamref name="A"/> Value: The value if the parse was successful or default if not.</para>
            </returns>
        </member>
        <member name="M:Washcloth.Statics.DefaultHash``1(``0)">
            <summary>Static wrapper for the instance based "object.GetHashCode" function.</summary>
            <typeparam name="T">The generic type of the hash operation.</typeparam>
            <param name="value">The item to get the hash code of.</param>
            <returns>The computed hash code using the base GetHashCode instance method.</returns>
        </member>
        <member name="M:Washcloth.Statics.Convert``2(``0)">
            <summary>Converts <paramref name="a"/> from <typeparamref name="A"/> to <typeparamref name="B"/>.</summary>
            <typeparam name="A">The type of the value to convert.</typeparam>
            <typeparam name="B">The type to convert the value to.</typeparam>
            <param name="a">The value to convert.</param>
            <returns>The <paramref name="a"/> value of <typeparamref name="B"/> type.</returns>
        </member>
        <member name="M:Washcloth.Statics.Equate``1(``0,``0)">
            <summary>Checks for equality of two values [<paramref name="a"/> == <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Washcloth.Statics.Equate``1(``0,``0,``0[])">
            <summary>Checks for equality among multiple values [<paramref name="a"/> == <paramref name="b"/> == <paramref name="c"/> == ...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <param name="c">The remaining operands of the equality check.</param>
            <returns>True if all operands are equal or false if not.</returns>
        </member>
        <member name="M:Washcloth.Statics.Equate``4(System.Int32,System.Int32,``1,``2,``3)">
            <summary>Determines if two sequences are equal.</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="A">The first sequence of the equate.</typeparam>
            <typeparam name="B">The second sequence of the equate.</typeparam>
            <typeparam name="Equate">The element equate function.</typeparam>
            <param name="start">The inclusive starting index to equate from.</param>
            <param name="end">The inclusive ending index to equate to.</param>
            <param name="a">The first sequence of the equate.</param>
            <param name="b">The second sequence of the equate.</param>
            <param name="equate">The element equate function.</param>
            <returns>True if the spans are equal; False if not.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequate``3(``0,``1)">
            <summary>Checks for inequality of two values [<paramref name="a"/> != <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the inequality.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inequate``1(``0,``0)">
            <summary>Checks for inequality of two values [<paramref name="a"/> != <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the inequality check.</param>
            <param name="b">The second operand of the inequality check.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:Washcloth.Statics.LessThan``3(``0,``1)">
            <summary>Checks if one value is less than another [<paramref name="a"/> &lt; <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the less than operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.LessThan``1(``0,``0)">
            <summary>Checks if one value is less than another [<paramref name="a"/> &lt; <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the less than check.</param>
            <param name="b">The second operand of the less than check.</param>
            <returns>The result of the less than check.</returns>
        </member>
        <member name="M:Washcloth.Statics.GreaterThan``3(``0,``1)">
            <summary>Checks if one value is greater than another [<paramref name="a"/> &gt; <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the greater than operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.GreaterThan``1(``0,``0)">
            <summary>Checks if one value is greater than another [<paramref name="a"/> &gt; <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the greater than check.</param>
            <param name="b">The second operand of the greater than check.</param>
            <returns>The result of the greater than check.</returns>
        </member>
        <member name="M:Washcloth.Statics.LessThanOrEqual``3(``0,``1)">
            <summary>Checks if one value is less than or equal to another [<paramref name="a"/> &lt;= <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the less than or equal to operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.LessThanOrEqual``1(``0,``0)">
            <summary>Checks if one value is less than or equal to another [<paramref name="a"/> &lt;= <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the less than or equal to check.</param>
            <param name="b">The second operand of the less than or equal to check.</param>
            <returns>The result of the less than or equal to check.</returns>
        </member>
        <member name="M:Washcloth.Statics.GreaterThanOrEqual``3(``0,``1)">
            <summary>Checks if one value is less greater or equal to another [<paramref name="a"/> &gt;= <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the greater than or equal to operation.</returns>
        </member>
        <member name="M:Washcloth.Statics.GreaterThanOrEqual``1(``0,``0)">
            <summary>Checks if one value is greater than or equal to another [<paramref name="a"/> &gt;= <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the greater than or equal to check.</param>
            <param name="b">The second operand of the greater than or equal to check.</param>
            <returns>The result of the greater than or equal to check.</returns>
        </member>
        <member name="M:Washcloth.Statics.Compare``1(``0,``0)">
            <summary>Compares two values.</summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="a">The first value of the comparison.</param>
            <param name="b">The second value of the comparison.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Washcloth.Statics.Negation``2(``0)">
            <summary>Negates a value [-<paramref name="a"/>].</summary>
            <typeparam name="A">The type of the value to negate.</typeparam>
            <typeparam name="B">The resulting type of the negation.</typeparam>
            <param name="a">The value to negate.</param>
            <returns>The result of the negation [-<paramref name="a"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Negation``1(``0)">
            <summary>Negates a value [-<paramref name="a"/>].</summary>
            <typeparam name="T">The type of the value to negate.</typeparam>
            <param name="a">The value to negate.</param>
            <returns>The result of the negation [-<paramref name="a"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Addition``3(``0,``1)">
            <summary>Adds two values [<paramref name="a"/> + <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Addition``1(``0,``0)">
            <summary>Adds two values [<paramref name="a"/> + <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Addition``1(``0,``0,``0,``0[])">
            <summary>Adds multiple values [<paramref name="a"/> + <paramref name="b"/> + <paramref name="c"/> + ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <param name="c">The third operand of the addition.</param>
            <param name="d">The remaining operands of the addition.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/> + <paramref name="c"/> + ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Addition``1(System.Action{System.Action{``0}})">
            <summary>Adds multiple values [step1 + step2 + step3 + ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper of the values to add.</param>
            <returns>The result of the addition [step1 + step2 + step3 + ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Subtraction``3(``0,``1)">
            <summary>Subtracts two values [<paramref name="a"/> - <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the subtraction [<paramref name="a"/> - <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Subtraction``1(``0,``0)">
            <summary>Subtracts two values [<paramref name="a"/> - <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the subtraction [<paramref name="a"/> - <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Subtraction``1(``0,``0,``0,``0[])">
            <summary>Subtracts multiple values [<paramref name="a"/> - <paramref name="b"/> - <paramref name="c"/> - ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <param name="c">The third operand.</param>
            <param name="d">The remaining values.</param>
            <returns>The result of the subtraction [<paramref name="a"/> - <paramref name="b"/> - <paramref name="c"/> - ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Subtraction``1(System.Action{System.Action{``0}})">
            <summary>Subtracts multiple numeric values [step1 - step2 - step3 - ...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the subtraction [step1 - step2 - step3 - ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Multiplication``3(``0,``1)">
            <summary>Multiplies two values [<paramref name="a"/> * <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Multiplication``1(``0,``0)">
            <summary>Multiplies two values [<paramref name="a"/> * <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Multiplication``1(``0,``0,``0,``0[])">
            <summary>Multiplies multiple values [<paramref name="a"/> * <paramref name="b"/> * <paramref name="c"/> * ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <param name="c">The third operand.</param>
            <param name="d">The remaining values.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/> * <paramref name="c"/> * ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Multiplication``1(System.Action{System.Action{``0}})">
            <summary>Multiplies multiple values [step1 * step2 * step3 * ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the multiplication [step1 * step2 * step3 * ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Division``3(``0,``1)">
            <summary>Divides two values [<paramref name="a"/> / <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the division [<paramref name="a"/> / <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Division``1(``0,``0)">
            <summary>Divides two values [<paramref name="a"/> / <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the division [<paramref name="a"/> / <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Division``1(``0,``0,``0,``0[])">
            <summary>Divides multiple values [<paramref name="a"/> / <paramref name="b"/> / <paramref name="c"/> / ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand of the division.</param>
            <param name="b">The second operand of the division.</param>
            <param name="c">The third operand of the division.</param>
            <param name="d">The remaining values of the division.</param>
            <returns>The result of the division [<paramref name="a"/> / <paramref name="b"/> / <paramref name="c"/> / ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Division``1(System.Action{System.Action{``0}})">
            <summary>Divides multiple values [step1 / step2 / step3 / ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the division [step1 / step2 / step3 / ...].</returns>
        </member>
        <member name="M:Washcloth.Statics.Remainder``3(``0,``1)">
            <summary>Remainders two values [<paramref name="a"/> % <paramref name="b"/>].</summary>
            <typeparam name="A">The type of the left operand.</typeparam>
            <typeparam name="B">The type of the right operand.</typeparam>
            <typeparam name="C">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the remainder operation [<paramref name="a"/> % <paramref name="b"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.Remainder``1(``0,``0)">
            <summary>Modulos two numeric values [<paramref name="a"/> % <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the modulation.</param>
            <param name="b">The second operand of the modulation.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Remainder``1(``0,``0,``0,``0[])">
            <summary>Modulos multiple numeric values [<paramref name="a"/> % <paramref name="b"/> % <paramref name="c"/> % ...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the modulation.</param>
            <param name="b">The second operand of the modulation.</param>
            <param name="c">The third operand of the modulation.</param>
            <param name="d">The remaining values of the modulation.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Remainder``1(System.Action{System.Action{``0}})">
            <summary>Modulos multiple numeric values [step_1 % step_2 % step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Washcloth.Statics.Inversion``1(``0)">
            <summary>Inverts a numeric value [1 / a].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The numeric value to invert.</param>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Washcloth.Statics.Power``1(``0,``0)">
            <summary>Powers two numeric values [a ^ b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the power.</param>
            <param name="b">The first operand of the power.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Washcloth.Statics.Power``1(``0,``0,``0,``0[])">
            <summary>Powers multiple numeric values [a ^ b ^ c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the power.</param>
            <param name="b">The second operand of the power.</param>
            <param name="c">The third operand of the power.</param>
            <param name="d">The remaining values of the power.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Washcloth.Statics.Power``1(System.Action{System.Action{``0}})">
            <summary>Powers multiple numeric values [step_1 ^ step_2 ^ step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Washcloth.Statics.SquareRoot``1(``0)">
            <summary>Square roots a numeric value [√a].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The numeric value to square root.</param>
            <returns>The result of the square root.</returns>
        </member>
        <member name="M:Washcloth.Statics.Root``1(``0,``0)">
            <summary>Roots two numeric values [a ^ (1 / b)].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The base of the root.</param>
            <param name="b">The root of the operation.</param>
            <returns>The result of the root.</returns>
        </member>
        <member name="M:Washcloth.Statics.Logarithm``1(``0,``0)">
            <summary>Computes the logarithm of a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="value">The value to compute the logarithm of.</param>
            <param name="base">The base of the logarithm to compute.</param>
            <returns>The computed logarithm value.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsInteger``1(``0)">
            <summary>Determines if a numerical value is an integer.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine integer status of.</param>
            <returns>Whether or not the value is an integer.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsNonNegative``1(``0)">
            <summary>Determines if a numerical value is non-negative.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine non-negative status of.</param>
            <returns>Whether or not the value is non-negative.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsNegative``1(``0)">
            <summary>Determines if a numerical value is negative.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine negative status of.</param>
            <returns>Whether or not the value is negative.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsPositive``1(``0)">
            <summary>Determines if a numerical value is positive.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine positive status of.</param>
            <returns>Whether or not the value is positive.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsEven``1(``0)">
            <summary>Determines if a numerical value is even.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine even status of.</param>
            <returns>Whether or not the value is even.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsOdd``1(``0)">
            <summary>Determines if a numerical value is odd.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine odd status of.</param>
            <returns>Whether or not the value is odd.</returns>
        </member>
        <member name="M:Washcloth.Statics.IsPrime``1(``0)">
            <summary>Determines if a numerical value is prime.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine prime status of.</param>
            <returns>Whether or not the value is prime.</returns>
        </member>
        <member name="M:Washcloth.Statics.AbsoluteValue``1(``0)">
            <summary>Gets the absolute value of a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to get the absolute value of.</param>
            <returns>The absolute value of the provided value.</returns>
        </member>
        <member name="M:Washcloth.Statics.Clamp``1(``0,``0,``0)">
            <summary>Gets a value restricted to a minimum and maximum range.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="value">The value to clamp.</param>
            <param name="minimum">The minimum of the range to clamp the value by.</param>
            <param name="maximum">The maximum of the range to clamp the value by.</param>
            <returns>The value restricted to the provided range.</returns>
        </member>
        <member name="M:Washcloth.Statics.EqualToLeniency``1(``0,``0,``0)">
            <summary>Checks for equality between two numeric values with a range of possibly leniency.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <param name="leniency">The allowed distance between the values to still be considered equal.</param>
            <returns>True if the values are within the allowed leniency of each other. False if not.</returns>
        </member>
        <member name="M:Washcloth.Statics.GreatestCommonFactor``1(``0,``0,``0[])">
            <summary>Computes the greatest common factor of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="a">The first operand of the greatest common factor computation.</param>
            <param name="b">The second operand of the greatest common factor computation.</param>
            <param name="c">The remaining operands of the greatest common factor computation.</param>
            <returns>The computed greatest common factor of the set of numbers.</returns>
        </member>
        <member name="M:Washcloth.Statics.GreatestCommonFactor``1(System.Action{System.Action{``0}})">
            <summary>Computes the greatest common factor of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="stepper">The set of numbers to compute the greatest common factor of.</param>
            <returns>The computed greatest common factor of the set of numbers.</returns>
        </member>
        <member name="M:Washcloth.Statics.LeastCommonMultiple``1(``0,``0,``0[])">
            <summary>Computes the least common multiple of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the least common muiltiple computation.</param>
            <param name="b">The second operand of the least common muiltiple computation.</param>
            <param name="c">The remaining operands of the least common muiltiple computation.</param>
            <returns>The computed least common least common multiple of the set of numbers.</returns>
        </member>
        <member name="M:Washcloth.Statics.LeastCommonMultiple``1(System.Action{System.Action{``0}})">
            <summary>Computes the least common multiple of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of numbers to compute the least common multiple of.</param>
            <returns>The computed least common least common multiple of the set of numbers.</returns>
        </member>
        <member name="M:Washcloth.Statics.LinearInterpolation``1(``0,``0,``0,``0,``0)">
            <summary>Linearly interpolations a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="x">The value along the first dimension to compute the linear interpolation for.</param>
            <param name="x0">A known starting point along the first dimension.</param>
            <param name="x1">A known ending point along the first dimension.</param>
            <param name="y0">A known starting point along the second dimension.</param>
            <param name="y1">A known ending point along the second dimension.</param>
            <returns>The linearly interpolated value.</returns>
        </member>
        <member name="M:Washcloth.Statics.Factorial``1(``0)">
            <summary>Computes the factorial of a numeric value [<paramref name="a"/>!] == [<paramref name="a"/> * (<paramref name="a"/> - 1) * (<paramref name="a"/> - 2) * ... * 1].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The integer value to compute the factorial of.</param>
            <returns>The computed factorial value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameter is not an integer value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameter is less than zero.</exception>
        </member>
        <member name="M:Washcloth.Statics.Combinations``1(``0,``0[])">
            <summary>Computes the combinations of <paramref name="N"/> values using the <paramref name="n"/> grouping definitions.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="N">The number of values to compute the combinations of.</param>
            <param name="n">The groups and how many values fall into each group.</param>
            <returns>The computed number of combinations.</returns>
        </member>
        <member name="M:Washcloth.Statics.BinomialCoefficient``1(``0,``0)">
            <summary>Computes the Binomial coefficient (N choose n).</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="N">The size of the entire set (N choose n).</param>
            <param name="n">The size of the subset (N choose n).</param>
            <returns>The computed binomial coefficient (N choose n).</returns>
        </member>
        <member name="M:Washcloth.Statics.Exponential``1(``0)">
            <summary>Computes the exponentional of a value [e ^ <paramref name="a"/>].</summary>
            <typeparam name="T">The generic type of the operation.</typeparam>
            <param name="a">The value to compute the exponentional of.</param>
            <returns>The exponential of the value [e ^ <paramref name="a"/>].</returns>
        </member>
        <member name="M:Washcloth.Statics.NaturalLogarithm``1(``0)">
            <summary>Computes the natural logarithm of a value [ln(<paramref name="a"/>)].</summary>
            <typeparam name="T">The generic type of the operation.</typeparam>
            <param name="a">The value to compute the natural log of.</param>
            <returns>The natural log of the provided value [ln(<paramref name="a"/>)].</returns>
        </member>
        <member name="M:Washcloth.Statics.LinearRegression2D``1(System.Action{System.Action{``0,``0}},``0@,``0@)">
            <summary>Computes the best fit line from a set of points in 2D space [y = slope * x + y_intercept].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="points">The points to compute the best fit line of.</param>
            <param name="slope">The slope of the computed best fit line [y = slope * x + y_intercept].</param>
            <param name="y_intercept">The y intercept of the computed best fit line [y = slope * x + y_intercept].</param>
        </member>
        <member name="M:Washcloth.Statics.FactorPrimes``1(``0,System.Action{``0})">
            <summary>Factors the primes numbers of a numeric integer value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to factor the prime numbers of.</param>
            <param name="step">The action to perform on all found prime factors.</param>
        </member>
        <member name="T:Washcloth.StepStatus">
            <summary>Status of iteration.</summary>
        </member>
        <member name="F:Washcloth.StepStatus.Continue">
            <summary>Stepper was not broken.</summary>
        </member>
        <member name="F:Washcloth.StepStatus.Break">
            <summary>Stepper was broken.</summary>
        </member>
        <member name="T:Washcloth.TagAttribute">
            <summary>A value-based "tag" attribute.</summary>
        </member>
        <member name="M:Washcloth.TagAttribute.#ctor(System.Object,System.Object)">
            <summary>Creates a new value-based "tag" attribute.</summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Washcloth.TagAttributeExtensions">
            <summary>Extension methods for reflection types and <see cref="T:Washcloth.TagAttribute"/>.</summary>
        </member>
        <member name="M:Washcloth.TagAttributeExtensions.GetTag(System.Reflection.MemberInfo,System.Object)">
            <summary>Gets a <see cref="T:Washcloth.TagAttribute"/> on a <see cref="T:System.Reflection.MemberInfo"/>.</summary>
            <param name="memberInfo">The type to get the <see cref="T:Washcloth.TagAttribute"/> of.</param>
            <param name="tag">The tag to get the value of.</param>
            <returns>
            (<see cref="T:System.Boolean"/> Found, <see cref="T:System.Object"/> Value)
            <para>- <see cref="T:System.Boolean"/> Found: True if the tag was found; False if not or if multiple tags were found (ambiguous).</para>
            <para>- <see cref="T:System.Object"/> Value: The value if found or default if not.</para>
            </returns>
        </member>
        <member name="M:Washcloth.TagAttributeExtensions.GetTag(System.Reflection.ParameterInfo,System.Object)">
            <summary>Gets a <see cref="T:Washcloth.TagAttribute"/> on a <see cref="T:System.Reflection.ParameterInfo"/>.</summary>
            <param name="parameterInfo">The type to get the <see cref="T:Washcloth.TagAttribute"/> of.</param>
            <param name="tag">The tag to get the value of.</param>
            <returns>
            (<see cref="T:System.Boolean"/> Found, <see cref="T:System.Object"/> Value)
            <para>- <see cref="T:System.Boolean"/> Found: True if the tag was found; False if not or if multiple tags were found (ambiguous).</para>
            <para>- <see cref="T:System.Object"/> Value: The value if found or default if not.</para>
            </returns>
        </member>
        <member name="T:Washcloth.StepRef`1">
            <summary>Delegate for data structure iteration.</summary>
            <typeparam name="T">The type of the instances within the data structure.</typeparam>
            <param name="current">The current instance of iteration through the data structure.</param>
        </member>
        <member name="T:Washcloth.StepRefBreak`1">
            <summary>Delegate for data structure iteration.</summary>
            <typeparam name="T">The type of the instances within the data structure.</typeparam>
            <param name="current">The current instance of iteration through the data structure.</param>
            <returns>The status of the iteration. Allows breaking functionality.</returns>
        </member>
        <member name="T:Washcloth.StepperRef`1">
            <summary>Delegate for a traversal function on a data structure.</summary>
            <typeparam name="T">The type of instances the will be traversed.</typeparam>
            <param name="step">The foreach function to perform on each iteration.</param>
        </member>
        <member name="T:Washcloth.StepperRefBreak`1">
            <summary>Delegate for a traversal function on a data structure.</summary>
            <typeparam name="T">The type of instances the will be traversed.</typeparam>
            <param name="step">The foreach function to perform on each iteration.</param>
        </member>
        <member name="T:Washcloth.StepFromStepRef`2">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
            <typeparam name="StepRef">The Step function.</typeparam>
        </member>
        <member name="M:Washcloth.StepFromStepRef`2.Do(`0)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepFromStepRef`2.op_Implicit(`1)~Washcloth.StepFromStepRef{`0,`1}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="stepRef">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.IStepRef`1">
            <summary>A compile time delegate for stepping values of iteration.</summary>
            <typeparam name="T">The generic type of values to step.</typeparam>
        </member>
        <member name="M:Washcloth.IStepRef`1.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="T:Washcloth.StepRefRuntime`1">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
        </member>
        <member name="M:Washcloth.StepRefRuntime`1.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepRefRuntime`1.op_Implicit(Washcloth.StepRef{`0})~Washcloth.StepRefRuntime{`0}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="stepRef">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.StepToStepRef`2">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
            <typeparam name="Step">The Step function.</typeparam>
        </member>
        <member name="M:Washcloth.StepToStepRef`2.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepToStepRef`2.op_Implicit(`1)~Washcloth.StepToStepRef{`0,`1}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="step">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.StepBreakRuntime`1">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
        </member>
        <member name="M:Washcloth.StepBreakRuntime`1.Do(`0)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepBreakRuntime`1.op_Implicit(System.Func{`0,Washcloth.StepStatus})~Washcloth.StepBreakRuntime{`0}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="stepBreak">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.StepBreakFromAction`2">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
            <typeparam name="Step">The Step function.</typeparam>
        </member>
        <member name="M:Washcloth.StepBreakFromAction`2.Do(`0)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepBreakFromAction`2.op_Implicit(`1)~Washcloth.StepBreakFromAction{`0,`1}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="step">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.IStepRefBreak`1">
            <summary>A compile time delegate for stepping values of iteration.</summary>
            <typeparam name="T">The generic type of values to step.</typeparam>
        </member>
        <member name="M:Washcloth.IStepRefBreak`1.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="T:Washcloth.StepRefBreakRuntime`1">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
        </member>
        <member name="M:Washcloth.StepRefBreakRuntime`1.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepRefBreakRuntime`1.op_Implicit(Washcloth.StepRefBreak{`0})~Washcloth.StepRefBreakRuntime{`0}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="stepRefBreak">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.StepRefBreakFromStepBreak`2">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
            <typeparam name="Step">The Step function.</typeparam>
        </member>
        <member name="M:Washcloth.StepRefBreakFromStepBreak`2.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepRefBreakFromStepBreak`2.op_Implicit(`1)~Washcloth.StepRefBreakFromStepBreak{`0,`1}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="step">The runtime Step delegate.</param>
        </member>
        <member name="T:Washcloth.StepRefBreakFromStepRef`2">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
            <typeparam name="Step">The Step function.</typeparam>
        </member>
        <member name="M:Washcloth.StepRefBreakFromStepRef`2.Do(`0@)">
            <summary>The invocation of the compile time delegate.</summary>
        </member>
        <member name="M:Washcloth.StepRefBreakFromStepRef`2.op_Implicit(`1)~Washcloth.StepRefBreakFromStepRef{`0,`1}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="step">The runtime Step delegate.</param>
        </member>
    </members>
</doc>
